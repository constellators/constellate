'use strict';

/* eslint-disable camelcase */

var path = require('path');
var fs = require('fs-extra');

var requireFn = typeof __non_webpack_require__ !== 'undefined' ? // eslint-disable-next-line no-undef
__non_webpack_require__ : require;

var cache = {};

/**
 * Gets the manifest for the constellate web project by the given name.
 *
 * @param  {string} projectName The project's name
 * @return {Object}             The manifest
 */
module.exports = function getWebProjectManifest(projectName) {
  var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : './dist';

  if (cache[projectName]) {
    return cache[projectName];
  }

  var rootPath = path.resolve(process.cwd(), `./node_modules/${projectName}/${basePath}`);
  var manifestFile = path.resolve(rootPath, './webpack-manifest.json');
  if (!fs.existsSync(manifestFile)) {
    throw new Error(`No manifest found at ${manifestFile}`);
  }
  // eslint-disable-next-line global-require,import/no-dynamic-require
  var manifest = requireFn(manifestFile);
  if (!manifest.index) {
    throw new Error(`Invalid constellate web project manifest found at ${manifestFile}`);
  }

  var jsParts = manifest.index.js.substr(manifest.index.js.indexOf('/constellate/')).split('/');
  var rootHttpPath = jsParts.slice(0, jsParts.length - 1).join('/');

  cache[projectName] = {
    serverPaths: {
      root: rootPath
    },
    httpPaths: {
      root: rootHttpPath,
      js: manifest.index.js,
      css: manifest.index.css
    },
    manifest
  };

  return cache[projectName];
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdldFdlYlByb2plY3RNYW5pZmVzdC5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsImZzIiwicmVxdWlyZUZuIiwiX19ub25fd2VicGFja19yZXF1aXJlX18iLCJjYWNoZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRXZWJQcm9qZWN0TWFuaWZlc3QiLCJwcm9qZWN0TmFtZSIsImJhc2VQYXRoIiwicm9vdFBhdGgiLCJyZXNvbHZlIiwicHJvY2VzcyIsImN3ZCIsIm1hbmlmZXN0RmlsZSIsImV4aXN0c1N5bmMiLCJFcnJvciIsIm1hbmlmZXN0IiwiaW5kZXgiLCJqc1BhcnRzIiwianMiLCJzdWJzdHIiLCJpbmRleE9mIiwic3BsaXQiLCJyb290SHR0cFBhdGgiLCJzbGljZSIsImxlbmd0aCIsImpvaW4iLCJzZXJ2ZXJQYXRocyIsInJvb3QiLCJodHRwUGF0aHMiLCJjc3MiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxNQUFSLENBQWI7QUFDQSxJQUFNQyxLQUFLRCxRQUFRLFVBQVIsQ0FBWDs7QUFFQSxJQUFNRSxZQUNKLE9BQU9DLHVCQUFQLEtBQW1DLFdBQW5DLEdBQ0k7QUFDQUEsdUJBRkosR0FHSUgsT0FKTjs7QUFNQSxJQUFNSSxRQUFRLEVBQWQ7O0FBRUE7Ozs7OztBQU1BQyxPQUFPQyxPQUFQLEdBQWlCLFNBQVNDLHFCQUFULENBQStCQyxXQUEvQixFQUFpRTtBQUFBLE1BQXJCQyxRQUFxQix1RUFBVixRQUFVOztBQUNoRixNQUFJTCxNQUFNSSxXQUFOLENBQUosRUFBd0I7QUFDdEIsV0FBT0osTUFBTUksV0FBTixDQUFQO0FBQ0Q7O0FBRUQsTUFBTUUsV0FBV1gsS0FBS1ksT0FBTCxDQUFhQyxRQUFRQyxHQUFSLEVBQWIsRUFBNkIsa0JBQWlCTCxXQUFZLElBQUdDLFFBQVMsRUFBdEUsQ0FBakI7QUFDQSxNQUFNSyxlQUFlZixLQUFLWSxPQUFMLENBQWFELFFBQWIsRUFBdUIseUJBQXZCLENBQXJCO0FBQ0EsTUFBSSxDQUFDVCxHQUFHYyxVQUFILENBQWNELFlBQWQsQ0FBTCxFQUFrQztBQUNoQyxVQUFNLElBQUlFLEtBQUosQ0FBVyx3QkFBdUJGLFlBQWEsRUFBL0MsQ0FBTjtBQUNEO0FBQ0Q7QUFDQSxNQUFNRyxXQUFXZixVQUFVWSxZQUFWLENBQWpCO0FBQ0EsTUFBSSxDQUFDRyxTQUFTQyxLQUFkLEVBQXFCO0FBQ25CLFVBQU0sSUFBSUYsS0FBSixDQUFXLHFEQUFvREYsWUFBYSxFQUE1RSxDQUFOO0FBQ0Q7O0FBRUQsTUFBTUssVUFBVUYsU0FBU0MsS0FBVCxDQUFlRSxFQUFmLENBQWtCQyxNQUFsQixDQUF5QkosU0FBU0MsS0FBVCxDQUFlRSxFQUFmLENBQWtCRSxPQUFsQixDQUEwQixlQUExQixDQUF6QixFQUFxRUMsS0FBckUsQ0FBMkUsR0FBM0UsQ0FBaEI7QUFDQSxNQUFNQyxlQUFlTCxRQUFRTSxLQUFSLENBQWMsQ0FBZCxFQUFpQk4sUUFBUU8sTUFBUixHQUFpQixDQUFsQyxFQUFxQ0MsSUFBckMsQ0FBMEMsR0FBMUMsQ0FBckI7O0FBRUF2QixRQUFNSSxXQUFOLElBQXFCO0FBQ25Cb0IsaUJBQWE7QUFDWEMsWUFBTW5CO0FBREssS0FETTtBQUluQm9CLGVBQVc7QUFDVEQsWUFBTUwsWUFERztBQUVUSixVQUFJSCxTQUFTQyxLQUFULENBQWVFLEVBRlY7QUFHVFcsV0FBS2QsU0FBU0MsS0FBVCxDQUFlYTtBQUhYLEtBSlE7QUFTbkJkO0FBVG1CLEdBQXJCOztBQVlBLFNBQU9iLE1BQU1JLFdBQU4sQ0FBUDtBQUNELENBaENEIiwiZmlsZSI6ImdldFdlYlByb2plY3RNYW5pZmVzdC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc2Vhbi9EZXZlbG9wbWVudC9jdHJscGx1c2IvY29uc3RlbGxhdGUvcHJvamVjdHMvY29uc3RlbGxhdGUtdXRpbHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxuY29uc3QgZnMgPSByZXF1aXJlKCdmcy1leHRyYScpXG5cbmNvbnN0IHJlcXVpcmVGbiA9XG4gIHR5cGVvZiBfX25vbl93ZWJwYWNrX3JlcXVpcmVfXyAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgICAgX19ub25fd2VicGFja19yZXF1aXJlX19cbiAgICA6IHJlcXVpcmVcblxuY29uc3QgY2FjaGUgPSB7fVxuXG4vKipcbiAqIEdldHMgdGhlIG1hbmlmZXN0IGZvciB0aGUgY29uc3RlbGxhdGUgd2ViIHByb2plY3QgYnkgdGhlIGdpdmVuIG5hbWUuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBwcm9qZWN0TmFtZSBUaGUgcHJvamVjdCdzIG5hbWVcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgVGhlIG1hbmlmZXN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0V2ViUHJvamVjdE1hbmlmZXN0KHByb2plY3ROYW1lLCBiYXNlUGF0aCA9ICcuL2Rpc3QnKSB7XG4gIGlmIChjYWNoZVtwcm9qZWN0TmFtZV0pIHtcbiAgICByZXR1cm4gY2FjaGVbcHJvamVjdE5hbWVdXG4gIH1cblxuICBjb25zdCByb290UGF0aCA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBgLi9ub2RlX21vZHVsZXMvJHtwcm9qZWN0TmFtZX0vJHtiYXNlUGF0aH1gKVxuICBjb25zdCBtYW5pZmVzdEZpbGUgPSBwYXRoLnJlc29sdmUocm9vdFBhdGgsICcuL3dlYnBhY2stbWFuaWZlc3QuanNvbicpXG4gIGlmICghZnMuZXhpc3RzU3luYyhtYW5pZmVzdEZpbGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBObyBtYW5pZmVzdCBmb3VuZCBhdCAke21hbmlmZXN0RmlsZX1gKVxuICB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBnbG9iYWwtcmVxdWlyZSxpbXBvcnQvbm8tZHluYW1pYy1yZXF1aXJlXG4gIGNvbnN0IG1hbmlmZXN0ID0gcmVxdWlyZUZuKG1hbmlmZXN0RmlsZSlcbiAgaWYgKCFtYW5pZmVzdC5pbmRleCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBjb25zdGVsbGF0ZSB3ZWIgcHJvamVjdCBtYW5pZmVzdCBmb3VuZCBhdCAke21hbmlmZXN0RmlsZX1gKVxuICB9XG5cbiAgY29uc3QganNQYXJ0cyA9IG1hbmlmZXN0LmluZGV4LmpzLnN1YnN0cihtYW5pZmVzdC5pbmRleC5qcy5pbmRleE9mKCcvY29uc3RlbGxhdGUvJykpLnNwbGl0KCcvJylcbiAgY29uc3Qgcm9vdEh0dHBQYXRoID0ganNQYXJ0cy5zbGljZSgwLCBqc1BhcnRzLmxlbmd0aCAtIDEpLmpvaW4oJy8nKVxuXG4gIGNhY2hlW3Byb2plY3ROYW1lXSA9IHtcbiAgICBzZXJ2ZXJQYXRoczoge1xuICAgICAgcm9vdDogcm9vdFBhdGgsXG4gICAgfSxcbiAgICBodHRwUGF0aHM6IHtcbiAgICAgIHJvb3Q6IHJvb3RIdHRwUGF0aCxcbiAgICAgIGpzOiBtYW5pZmVzdC5pbmRleC5qcyxcbiAgICAgIGNzczogbWFuaWZlc3QuaW5kZXguY3NzLFxuICAgIH0sXG4gICAgbWFuaWZlc3QsXG4gIH1cblxuICByZXR1cm4gY2FjaGVbcHJvamVjdE5hbWVdXG59XG4iXX0=